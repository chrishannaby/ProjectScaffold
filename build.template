// --------------------------------------------------------------------------------------
// FAKE build script
// --------------------------------------------------------------------------------------

#r @"packages/build/FAKE/tools/FakeLib.dll"
open Fake
open Fake.Git
open Fake.AssemblyInfoFile
open Fake.ReleaseNotesHelper
open Fake.UserInputHelper

open System
open System.IO
open System.Diagnostics

// --------------------------------------------------------------------------------------
// START TODO: Provide project-specific details below
// --------------------------------------------------------------------------------------

// Information about the project are used
//  - for version and project name in generated AssemblyInfo file
//  - to run tests

// The name of the project
// (used by attributes in AssemblyInfo, name of a NuGet package and directory in 'src')
let project = "##ProjectName##"

// Short summary of the project
// (used as description in AssemblyInfo and as a short summary for NuGet package)
let summary = "##Summary##"

// Package name
// (used for the name of the Ubisense package)
let packageName = "##PackageName##"

// Service name
// (used as the name of the Ubisense service)
let serviceName = "##ServiceName##"

// File system information
let solutionFile  = "##ProjectName##.sln"

// Default target configuration
let configuration = "Release"

// Pattern specifying assemblies to be tested using NUnit
let testAssemblies = "tests/**/bin" </> configuration </> "*Tests*.dll"

// --------------------------------------------------------------------------------------
// END TODO: The rest of the file includes standard build steps
// --------------------------------------------------------------------------------------

// Read additional information from the release notes document
let release = LoadReleaseNotes "RELEASE_NOTES.md"

// Helper active pattern for project types
let (|Fsproj|Csproj|Vbproj|Shproj|) (projFileName:string) =
    match projFileName with
    | f when f.EndsWith("fsproj") -> Fsproj
    | f when f.EndsWith("csproj") -> Csproj
    | f when f.EndsWith("vbproj") -> Vbproj
    | f when f.EndsWith("shproj") -> Shproj
    | _                           -> failwith (sprintf "Project file %s not supported. Unknown project type." projFileName)

// Generate assembly info files with the right version & up-to-date information
Target "AssemblyInfo" (fun _ ->
    let getAssemblyInfoAttributes projectName =
        [ Attribute.Title (projectName)
          Attribute.Product project
          Attribute.Description summary
          Attribute.Version release.AssemblyVersion
          Attribute.FileVersion release.AssemblyVersion
          Attribute.Configuration configuration ]

    let getProjectDetails projectPath =
        let projectName = System.IO.Path.GetFileNameWithoutExtension(projectPath)
        ( projectPath,
          projectName,
          System.IO.Path.GetDirectoryName(projectPath),
          (getAssemblyInfoAttributes projectName)
        )

    !! "src/**/*.??proj"
    |> Seq.map getProjectDetails
    |> Seq.iter (fun (projFileName, projectName, folderName, attributes) ->
        match projFileName with
        | Fsproj -> CreateFSharpAssemblyInfo (folderName </> "AssemblyInfo.fs") attributes
        | Csproj -> CreateCSharpAssemblyInfo ((folderName </> "Properties") </> "AssemblyInfo.cs") attributes
        | Vbproj -> CreateVisualBasicAssemblyInfo ((folderName </> "My Project") </> "AssemblyInfo.vb") attributes
        | Shproj -> ()
        )
)

// Copies binaries from default VS location to expected bin folder
Target "CopyBinaries" (fun _ ->
    !! "src/**/*.??proj"
    -- "src/**/*.shproj"
    |> Seq.map (fun f -> (System.IO.Path.GetDirectoryName f) </> "bin" </> configuration)
    |> Seq.iter (fun f -> CopyDir ("bin" </> "i586_windows_1.3") f (fun _ -> true))
    )

// --------------------------------------------------------------------------------------
// Creates xml file for installation through service manager

Target "BuildPackage" (fun _ ->
    CopyFile "bin" "PackageTemplate.xml"
    let packageFile = "bin/PackageTemplate.xml"
    let doc = XMLHelper.XMLDoc <| File.ReadAllText packageFile
    (doc.SelectSingleNode "/install/package").InnerText <- packageName
    (doc.SelectSingleNode "/install/services/value/name").InnerText <- serviceName
    // Set version number from Release notes
    let v = release.SemVer
    let version = doc.SelectSingleNode "/install/services/value/version"
    (version.SelectSingleNode "major_").InnerText <- string v.Major
    (version.SelectSingleNode "minor_").InnerText <- string v.Minor
    (version.SelectSingleNode "build_").InnerText <- string v.Patch
    // Fill program node with exe file
    let program =
        !! "bin/i586_windows_1.3/*.exe"
        |> Seq.head
        |> System.IO.Path.GetFileName
    (doc.SelectSingleNode "/install/services/value/programs/value").InnerText <- program
    // Fill libries node with all other files
    let librariesNode = (doc.SelectSingleNode "/install/services/value/libraries/value")
    let libraries =
        !! "bin/i586_windows_1.3/*"
        -- "bin/i586_windows_1.3/*.exe"
        |> Seq.map System.IO.Path.GetFileName
        |> Seq.iter (fun f ->
                let element = doc.CreateElement "value"
                element.InnerText <- f
                librariesNode.AppendChild element |> ignore
                )
    doc.Save(packageFile)
    let packageFileName = packageName.Replace(" ", "") + ".xml"
    Rename ("bin" </> packageFileName) "bin/PackageTemplate.xml"
)

// --------------------------------------------------------------------------------------
// Clean build results

let vsProjProps = 
#if MONO
    [ ("DefineConstants","MONO"); ("Configuration", configuration) ]
#else
    [ ("Configuration", configuration); ("Platform", "Any CPU") ]
#endif

Target "Clean" (fun _ ->
    !! solutionFile |> MSBuildReleaseExt "" vsProjProps "Clean" |> ignore
    CleanDirs ["bin"; "temp"]
)

// --------------------------------------------------------------------------------------
// Build library & test project

Target "Build" (fun _ ->
    !! solutionFile
    |> MSBuildReleaseExt "" vsProjProps "Rebuild"
    |> ignore
)

// --------------------------------------------------------------------------------------
// Run the unit tests using test runner

Target "RunTests" (fun _ ->
    !! testAssemblies
    |> NUnit (fun p ->
        { p with
            DisableShadowCopy = true
            TimeOut = TimeSpan.FromMinutes 20.
            OutputFile = "TestResults.xml" })
)

// --------------------------------------------------------------------------------------
// Release Scripts

Target "Release" (fun _ ->
    StageAll ""
    Git.Commit.Commit "" (sprintf "Bump version to %s" release.NugetVersion)

    Branches.tag "" release.NugetVersion
)

// --------------------------------------------------------------------------------------
// Run all targets by default. Invoke 'build <Target>' to override

Target "All" DoNothing

"AssemblyInfo"
  ==> "Clean"
  ==> "Build"
  ==> "CopyBinaries"
  ==> "BuildPackage"
  ==> "Release"
  ==> "All"

RunTargetOrDefault "All"
